generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String?
  firstName     String?
  lastName      String?
  phone         String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean?  @default(false)

  addresses   Address[]
  orders      Order[]
  reviews     Review[]
  wishlist    Product[] @relation(fields: [wishlistIds], references: [id])
  wishlistIds String[]  @db.ObjectId
  wishlistItems WishlistItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_token     String? @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  comparePrice Float?
  rating       Float          @default(0)
  reviews      Review[]
  stock        Int            @default(0)
  images       ProductImage[]
  badge        String?
  featured     Boolean?       @default(false)
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String         @db.ObjectId

  // Product specific fields
  storageInstructions String?
  weightOptions       Float[]
  certifications      String[]

  // Dynamic pricing
  priceMultiplier Float? @default(1.0) // For special days pricing

  orderItems  OrderItem[]
  wishedBy    User[]      @relation(fields: [wishedByIds], references: [id])
  wishedByIds String[]    @db.ObjectId
  wishlistItems WishlistItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("products")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  rating    Float
  title     String
  content   String
  helpful   Int     @default(0)
  verified  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String?
  fileSize  Int?
  publicUrl String
  mimeType  String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  @@map("product_images")
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  address1  String
  address2  String?
  city      String
  postcode  String
  isDefault Boolean @default(false)
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @db.ObjectId
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  subtotal        Float
  deliveryFee     Float
  total           Float
  deliveryDate    DateTime
  deliveryTime    String
  address         Address     @relation(fields: [addressId], references: [id])
  addressId       String      @db.ObjectId
  stripeSessionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  price     Float
  weight    Float?

  @@map("order_items")
}

model WishlistItem {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  productId       String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())

  @@map("wishlist_items")
  @@unique([userId, productId])
}

model Contact {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  subject   String?
  createdAt DateTime @default(now())

  @@map("contacts")
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}
